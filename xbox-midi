/*
 Example sketch for the Xbox 360 USB library - developed by Kristian Lauszus
 For more information visit my blog: http://blog.tkjelectronics.dk/ or
 send me an e-mail:  kristianl@tkjelectronics.com
 */
#include <MIDI.h>
#include <XBOXUSB.h>

// Satisfy the IDE, which needs to see the include statment in the ino too.
#ifdef dobogusinclude
#include <spi4teensy3.h>
#endif
#include <SPI.h>

int MIDI_OUTPUT_CHANNEL = 2;
MIDI_CREATE_DEFAULT_INSTANCE();

USB Usb;
XBOXUSB Xbox(&Usb);

void setup() {

  Serial.begin(115200);
#if !defined(__MIPSEL__)
  while (!Serial); // Wait for serial port to connect - used on Leonardo, Teensy and other boards with built-in USB CDC serial connection
#endif
  if (Usb.Init() == -1) {
//    Serial.print(F("\r\nOSC did not start"));
    while (1); //halt
  }
//  Serial.print(F("\r\nXBOX USB Library Started"));
  MIDI.begin(); 
}
void loop() {
  Usb.Task();
  if (Xbox.Xbox360Connected) {   
    if (Xbox.getButtonPress(L2) || Xbox.getButtonPress(R2)) {
//      Serial.print("L2: ");
//      Serial.print(Xbox.getButtonPress(L2));
//      Serial.print("\tR2: ");
//      Serial.println(Xbox.getButtonPress(R2));
      Xbox.setRumbleOn(Xbox.getButtonPress(L2), Xbox.getButtonPress(R2));
    } else
      Xbox.setRumbleOn(0, 0);

    if (Xbox.getAnalogHat(LeftHatX) > 7500 || Xbox.getAnalogHat(LeftHatX) < -7500 || Xbox.getAnalogHat(LeftHatY) > 7500 || Xbox.getAnalogHat(LeftHatY) < -7500 || Xbox.getAnalogHat(RightHatX) > 7500 || Xbox.getAnalogHat(RightHatX) < -7500 || Xbox.getAnalogHat(RightHatY) > 7500 || Xbox.getAnalogHat(RightHatY) < -7500) {
      if (Xbox.getAnalogHat(LeftHatX) > 7500 || Xbox.getAnalogHat(LeftHatX) < -7500) {
//        Serial.print(F("LeftHatX: "));
//        Serial.print(Xbox.getAnalogHat(LeftHatX));
//        Serial.print("\t");
      }
      if (Xbox.getAnalogHat(LeftHatY) > 7500 || Xbox.getAnalogHat(LeftHatY) < -7500) {
//        Serial.print(F("LeftHatY: "));
//        Serial.print(Xbox.getAnalogHat(LeftHatY));
//        Serial.print("\t");
      }
      if (Xbox.getAnalogHat(RightHatX) > 7500 || Xbox.getAnalogHat(RightHatX) < -7500) {
//        Serial.print(F("RightHatX: "));
//        Serial.print(Xbox.getAnalogHat(RightHatX));
//        Serial.print("\t");
      }
      if (Xbox.getAnalogHat(RightHatY) > 7500 || Xbox.getAnalogHat(RightHatY) < -7500) {
//       Serial.print(F("RightHatY: "));
//       Serial.print(Xbox.getAnalogHat(RightHatY));
      }
    }

    if (Xbox.getButtonClick(UP)) {
      Xbox.setLedOn(LED1);
//      Serial.println(F("Up"));
    }
    if (Xbox.getButtonClick(DOWN)) {
      Xbox.setLedOn(LED4);
//      Serial.println(F("Down"));
    }
    if (Xbox.getButtonClick(LEFT)) {
      Xbox.setLedOn(LED3);
//      Serial.println(F("Left"));
    }
    if (Xbox.getButtonClick(RIGHT)) {
      Xbox.setLedOn(LED2);
 //     Serial.println(F("Right"));
    }

    if (Xbox.getButtonClick(START)) {
      Xbox.setLedMode(ALTERNATING);
      MIDI.sendNoteOn(34, 127, MIDI_OUTPUT_CHANNEL);    // Send a Note (pitch 24, velo 127 on channel $MIDI_OUTPUT_CHANNEL)
      delay(10);                // Wait for 10 ms
      MIDI.sendNoteOff(34, 0, MIDI_OUTPUT_CHANNEL); // Stop the note
  //    Serial.println(F("Start"));
    }
    if (Xbox.getButtonClick(BACK)) {
      Xbox.setLedBlink(ALL);
//      Serial.println(F("Back"));
    }
    if (Xbox.getButtonClick(L3)){
//      Serial.println(F("L3"));
      }
    if (Xbox.getButtonClick(R3)){
//      Serial.println(F("R3"));
      }
    if (Xbox.getButtonClick(L1)){
 //     Serial.println(F("L1"));
      }
    if (Xbox.getButtonClick(R1)){
 //     Serial.println(F("R1"));
      }

    if (Xbox.getButtonClick(XBOX)) {
      Xbox.setLedMode(ROTATING);
 //     Serial.println(F("Xbox"));
    }

    if (Xbox.getButtonClick(A)){
        MIDI.sendNoteOn(40, 127, MIDI_OUTPUT_CHANNEL);    // Send a Note (pitch 24, velo 127 on channel $MIDI_OUTPUT_CHANNEL)
        delay(30);                // Wait for 10 ms
        MIDI.sendNoteOff(40, 0, MIDI_OUTPUT_CHANNEL); // Stop the note
    }  
    if (Xbox.getButtonClick(B)){
        MIDI.sendNoteOn(41, 127, MIDI_OUTPUT_CHANNEL);    // Send a Note (pitch 25, velo 127 on channel $MIDI_OUTPUT_CHANNEL)
        delay(30);                // Wait for 10 ms
        MIDI.sendNoteOff(41, 0, MIDI_OUTPUT_CHANNEL); // Stop the note
    } 
    if (Xbox.getButtonClick(X)){
        MIDI.sendNoteOn(42, 127, MIDI_OUTPUT_CHANNEL);    // Send a Note (pitch 26, velo 127 on channel $MIDI_OUTPUT_CHANNEL)
        delay(30);                // Wait for 10 ms
        MIDI.sendNoteOff(42, 0, MIDI_OUTPUT_CHANNEL); // Stop the note
    } 
    if (Xbox.getButtonClick(Y)){
        MIDI.sendNoteOn(43, 127, MIDI_OUTPUT_CHANNEL);    // Send a Note (pitch 27, velo 127 on channel $MIDI_OUTPUT_CHANNEL)
        delay(10);                // Wait for 10 ms
        MIDI.sendNoteOff(43, 0, MIDI_OUTPUT_CHANNEL); // Stop the note
    } 
 }  delay(1);
}
